<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>{{ .Title }}</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    body {
      margin: 20px;
      background: #f9f9f9;
      color: #222;
      transition: background 0.3s, color 0.3s;
      height: calc(100vh - 40px); /* viewport minus margins */
      display: flex;
      flex-direction: column;
    }
    body.dark {
      background: #121212;
      color: #eee;
    }
    /* Header area */
    .header-row {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .header-left {
      display: flex;
      align-items: baseline;
      gap: 0.5rem;
    }
    .header-left h1 {
      margin: 0;
    }
    .header-left small {
      font-size: 1rem;
      color: #6c757d;
    }
    body.dark .header-left small {
      color: #adb5bd;
    }
    .header-right {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    #toggleThemeBtn {
      margin-top: 0;
    }
    /* Connection status next to toggle */
    #connectionStatus {
      font-style: italic;
    }

    /* Columns area */
    .channel-columns {
      flex: 1 1 auto;
      display: flex;
      gap: 1rem;
      overflow: hidden;
      margin-top: 1rem;
      min-height: 0; /* allow children to shrink */
    }
    .channel-column {
      flex: 1 1 0;
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 4px rgba(0,0,0,0.1);
      padding: 1rem;
      overflow-y: auto;
      min-height: 0; /* IMPORTANT for scroll inside flex */
      transition: background 0.3s, color 0.3s;
      display: flex;
      flex-direction: column;
    }
    body.dark .channel-column {
      background: #222;
      color: #ddd;
      box-shadow: 0 1px 6px rgba(255 255 255 / 0.1);
    }
    /* Sticky column titles */
    .channel-column h2 {
      margin-bottom: 1rem;
      flex-shrink: 0;
      position: sticky;
      top: 0;
      background: inherit;
      z-index: 1;
      padding-bottom: 0.5rem;
    }
    /* Weather card styling */
    .channel-card {
      margin-bottom: 1rem;
      padding: 1rem;
      border-radius: 8px;
      background: #fefefe;
      box-shadow: 0 1px 4px rgba(0,0,0,0.1);
      transition: background 0.3s, color 0.3s;
      flex-shrink: 0;
    }
    body.dark .channel-card {
      background: #333;
      box-shadow: 0 1px 6px rgba(255 255 255 / 0.1);
    }
    .channel-card time {
      display: block;
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 0.5rem;
      transition: color 0.3s;
    }
    body.dark .channel-card time {
      color: #aaa;
    }
    .station {
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
  </style>
</head>
<body>
  <div class="header-row">
    <div class="header-left">
      <h1>{{ .Title }}</h1>
      <small>{{ .Version }}</small>
    </div>
    <div class="header-right">
      <button id="toggleThemeBtn" class="btn btn-outline-secondary btn-sm">
        Switch to Dark Mode
      </button>
      <span id="connectionStatus">Verbinden...</span>
    </div>
  </div>

  <div class="channel-columns">
    {{ range .Channels }}
    <div class="channel-column" id="{{ .Name }}">
      <h2>{{ .Title }}</h2>
    </div>
    {{ end }}
  </div>

  <script>
    const toggleBtn = document.getElementById("toggleThemeBtn");
    const connectionStatus = document.getElementById("connectionStatus");

    // Theme toggle logic
    toggleBtn.onclick = () => {
      document.body.classList.toggle("dark");
      if (document.body.classList.contains("dark")) {
        toggleBtn.textContent = "Switch to Light Mode";
      } else {
        toggleBtn.textContent = "Switch to Dark Mode";
      }
    };

    const ws = new WebSocket("ws://localhost:8080/ws");

    function formatTimestamp(ts) {
      const d = new Date(ts);
      return d.toLocaleString(undefined, {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    }

    ws.onopen = () => {
      connectionStatus.textContent = "Verbunden. Warte auf Daten...";
    };

    const channels = {
      {{- range .Channels }}
      "{{ .Name }}": {
        col: document.getElementById("{{ .Name }}"),
        render: function(card, data) {
          {{- range .Fields }}
            const {{ .GoName }}El = document.createElement("div");
          {{ .GoName }}El.textContent = "{{ .Label }}: " + data.{{ .JSONName }};
          card.appendChild({{ .GoName }}El);
          {{- end }}
        }
      },
          {{- end }}
    };

ws.onmessage = (event) => {
  const envelope = JSON.parse(event.data);
  const type = envelope.type;
  const data = envelope.data;

  const card = document.createElement("div");
  card.className = "channel-card";

  if (data.timestamp) {
    const timestamp = formatTimestamp(data.timestamp);
    const timeEl = document.createElement("time");
    timeEl.setAttribute("datetime", data.timestamp);
    timeEl.textContent = timestamp;
    card.appendChild(timeEl);
  }

  // Use the channel render function for this message type
  if (channels[type]) {
    channels[type].render(card, data);
    channels[type].col.insertBefore(card, channels[type].col.firstChild);
  } else {
    console.warn("Unknown channel type:", type);
  }
};

    ws.onerror = (err) => {
      connectionStatus.textContent = "Verbindungsfehler";
      console.error("WebSocket error:", err);
    };

    ws.onclose = () => {
      connectionStatus.textContent += " (Verbindung geschlossen)";
    };
  </script>
</body>
</html>
