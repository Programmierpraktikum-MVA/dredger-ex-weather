// Don't edit this file, as it is generated by dredger
// TODO: use wire for dependencies

package main

import (
	"build/async/server"
	"build/core"
	"build/core/log"
	"build/core/tracing"
	"build/db"
	"build/rest"
	"build/rest/middleware"
	"build/web"
	"context"
	"embed"
	_ "embed"

	"github.com/labstack/echo-contrib/echoprometheus"
	"github.com/labstack/echo/v4"
	echoMiddleware "github.com/labstack/echo/v4/middleware"
	// "go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho"
)

//go:embed web
var embeddedFS embed.FS

func main() {
	log.Setup(core.AppConfig.Name, core.Service, core.AppConfig.LogFile, core.AppConfig.LokiServer, core.AppConfig.LokiKey, core.AppConfig.LokiLabels, core.AppConfig.LokiBuffersize, core.AppConfig.LokiMaxDelay, core.AppConfig.Debug)

	// init Opentelemetry
	if core.AppConfig.Tracing {
		tp, err := tracing.InitTracer()
		if err != nil {
			log.Fatal().Err(err).Msg("Initializing tracer failed")
		}
		defer func() {
			if err := tp.Shutdown(context.Background()); err != nil {
				log.Warn().Err(err).Msg("Error shutting down tracer provider")
			}
		}()
	}
	db.InitDB()
	defer db.CloseDB()

	mainSvc()

	log.Info().Str("port", core.AppConfig.PortNb).Msg("Starting web service")

	// start echo server
	e := echo.New()
	e.Use(echoprometheus.NewMiddleware(core.AppConfig.Service)) // adds middleware to gather metrics

	e.Use(echoMiddleware.CORS())
	e.Use(middleware.LoggerHandler)
	// e.Use(otelecho.Middleware(core.AppConfig.Sid))
	e.Use(middleware.PolicyHandler) // Policy Enforcement Point to check access

	e.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics
	rest.NewHandler(e)

	//start nats server
	server.RegisterHandlers(e)

	// serve doc
	if core.AppConfig.ElementsDoc {
		log.Info().Msg("Enabled Elements documentation")
		e.FileFS("/doc", "web/doc/elements.html", embeddedFS)
	} else if core.AppConfig.RapidocDoc {
		log.Info().Msg("Enabled Rapidoc documentation")
		e.FileFS("/doc", "web/doc/rapidoc.html", embeddedFS)
	}
	e.FileFS("/weather-api.yaml", "web/doc/weather-api.yaml", embeddedFS)

	// serve default stylesheets and javascript files
	e.StaticFS("/css/", echo.MustSubFS(web.Css, "css"))
	e.StaticFS("/js/", echo.MustSubFS(web.Js, "js"))
	e.StaticFS("/images/", echo.MustSubFS(web.Images, "images"))
	e.StaticFS("/", echo.MustSubFS(web.Public, "public"))

	if core.AppConfig.CertPem != "" && core.AppConfig.KeyPem != "" {
		e.Logger.Fatal(e.StartTLS(":"+core.AppConfig.PortNb, []byte(core.AppConfig.CertPem), []byte(core.AppConfig.KeyPem)))
	} else {
		e.Logger.Fatal(e.Start(":" + core.AppConfig.PortNb))
	}
}
